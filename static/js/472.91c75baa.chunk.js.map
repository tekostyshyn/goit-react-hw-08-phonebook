{"version":3,"file":"static/js/472.91c75baa.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Contact/Contact.styled.js","components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectContacts = state => state.contacts.items;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  border: 1px solid black;\n  padding: 10px;\n  margin-top: 10px;\n  margin-bottom: 20px;\n  width: 400px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  padding: 5px;\n  width: 200px;\n  margin-bottom: 10px;\n  border: 1px solid gray;\n`;\n\nexport const Button = styled.button`\n  font-size: 16px;\n  border: 1px solid black;\n  border-radius: 2px;\n  padding: 5px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: lightgray;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact, updateContact } from 'redux/contacts/operations';\nimport { nanoid } from 'nanoid';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n\n    const existingContact = contacts.find(contact => contact.name === name);\n    if (existingContact) {\n      dispatch(updateContact({ ...existingContact, number }));\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    form.reset();\n  };\n\n  const nameInpudId = nanoid();\n  const numberInpudId = nanoid();\n  return (\n    <Form action=\"\" onSubmit={handleSubmit}>\n      <Label htmlFor={nameInpudId} c>\n        Name\n      </Label>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        id={nameInpudId}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <Label htmlFor={numberInpudId} c>\n        Number\n      </Label>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        id={numberInpudId}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  margin-top: 10px;\n  margin-bottom: 10px;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  padding: 5px;\n  width: 200px;\n  margin-bottom: 10px;\n  border: 1px solid gray;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport { nanoid } from 'nanoid';\nimport { Container, Label, Input } from './Filter.styled';\n\nconst Filter = () => {\n  const inputId = nanoid();\n  const dispatch = useDispatch();\n\n  return (\n    <Container>\n      <Label htmlFor={inputId}>Find contacts by name</Label>\n      <Input\n        type=\"text\"\n        name=\"input\"\n        id={inputId}\n        onChange={e => {\n          dispatch(setFilter(e.target.value));\n        }}\n      />\n    </Container>\n  );\n};\n\nexport default Filter;\n","import styled from \"styled-components\";\n\nexport const ListItem = styled.li`\nfont-size: 18px;\nmargin-bottom: 5px;\ndisplay: flex;\nalign-items: center;\n`","import PropTypes from 'prop-types';\nimport { ListItem } from './Contact.styled';\n\nconst Contact = ({ name, number, children }) => {\n  return (\n    <ListItem>\n      {name}: {number}\n      {children}\n    </ListItem>\n  );\n};\n\nexport default Contact;\n\nContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: none;\n`;\n\nexport const Button = styled.button`\n  margin-left: 10px;\n  font-size: 14px;\n  border: 1px solid black;\n  border-radius: 2px;\n  cursor: pointer;\n\n  &:hover,\n  &:focus {\n    background-color: lightgray;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\n\nimport Contact from 'components/Contact';\nimport { Button, List } from './ContactsList.styled';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <List>\n        {visibleContacts.map(({ id, name, number }) => (\n          <Contact key={id} id={id} name={name} number={number}>\n            <Button\n              type=\"button\"\n              onClick={() => {\n                dispatch(deleteContact(id));\n              }}\n            >\n              Delete\n            </Button>\n          </Contact>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default ContactsList;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectIsLoading, selectError } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactsList from 'components/ContactsList';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <ContactsList />\n    </div>\n  );\n}\n"],"names":["selectFilter","state","filter","selectIsLoading","contacts","isLoading","selectError","error","selectContacts","items","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","Form","styled","Label","Input","Button","dispatch","useDispatch","useSelector","nameInpudId","numberInpudId","action","onSubmit","e","preventDefault","form","target","name","elements","value","number","existingContact","find","contact","updateContact","addContact","reset","htmlFor","c","type","pattern","title","required","Container","inputId","onChange","setFilter","ListItem","children","List","visibleContacts","toLowerCase","includes","map","onClick","deleteContact","Contacts","useEffect","fetchContacts"],"sourceRoot":""}